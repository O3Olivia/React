{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  value: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"value\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.value++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//     // state.counter++; return state -> 이렇게 하면 절대 안된다. redux를 사용할땐 state를 직접적으로 변경시킬 수 없다.\n//     // 대신, 새로운 state 객체를 return하여 재정의 시켜야한다.\n//     // 그렇기 때문에 return {counter:} 형식으로 사용해야한다.\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.value,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n//   return state;\n// };\n\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducer: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","value","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","counter","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","reducer","login","logout","store","auth","counterActions","actions","authActions"],"sources":["/Users/olivia/Desktop/study/front-end/React/third_react/redux-counter/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst initialCounterState = { value: 0, showCounter: true };\n\nconst counterSlice = createSlice({\n  name: \"value\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.value++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//     // state.counter++; return state -> 이렇게 하면 절대 안된다. redux를 사용할땐 state를 직접적으로 변경시킬 수 없다.\n//     // 대신, 새로운 state 객체를 return하여 재정의 시켜야한다.\n//     // 그렇기 때문에 return {counter:} 형식으로 사용해야한다.\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.value,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n//   return state;\n// };\n\nconst initialAuthState = {\n  isAuthenticated: false,\n};\n\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducer: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n\nconst store = configureStore({\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAAEC,KAAK,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAE3D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,OAAO;EACbC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACRC,SAAS,CAACC,KAAK,EAAE;MACfA,KAAK,CAACP,KAAK,EAAE;IACf,CAAC;IACDQ,SAAS,CAACD,KAAK,EAAE;MACfA,KAAK,CAACE,OAAO,EAAE;IACjB,CAAC;IACDC,QAAQ,CAACH,KAAK,EAAEI,MAAM,EAAE;MACtBJ,KAAK,CAACE,OAAO,GAAGF,KAAK,CAACE,OAAO,GAAGE,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAa,CAACN,KAAK,EAAE;MACnBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IACxC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMa,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AACnB,CAAC;AAED,MAAMC,SAAS,GAAGnB,WAAW,CAAC;EAC5BM,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAEU,gBAAgB;EAC9BG,OAAO,EAAE;IACPC,KAAK,CAACX,KAAK,EAAE;MACXA,KAAK,CAACQ,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDI,MAAM,CAACZ,KAAK,EAAE;MACZA,KAAK,CAACQ,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;AAEF,MAAMK,KAAK,GAAGtB,cAAc,CAAC;EAC3BmB,OAAO,EAAE;IAAER,OAAO,EAAEP,YAAY,CAACe,OAAO;IAAEI,IAAI,EAAEL,SAAS,CAACC;EAAQ;AACpE,CAAC,CAAC;AAEF,OAAO,MAAMK,cAAc,GAAGpB,YAAY,CAACqB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO;AAE5C,eAAeH,KAAK"},"metadata":{},"sourceType":"module"}