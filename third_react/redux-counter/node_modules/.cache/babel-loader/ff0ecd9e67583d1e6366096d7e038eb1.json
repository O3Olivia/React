{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//     // state.counter++; return state -> 이렇게 하면 절대 안된다. redux를 사용할땐 state를 직접적으로 변경시킬 수 없다.\n//     // 대신, 새로운 state 객체를 return하여 재정의 시켜야한다.\n//     // 그렇기 때문에 return {counter:} 형식으로 사용해야한다.\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.value,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n//   return state;\n// };\n\nconst initialAuthState = {\n  isAuthenticated: false\n};\ncreateSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducer: {\n    login() {},\n    logout() {}\n  }\n});\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","reducer","login","logout","store","counterActions","actions"],"sources":["/Users/olivia/Desktop/study/front-end/React/third_react/redux-counter/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst initialCounterState = { counter: 0, showCounter: true };\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//     // state.counter++; return state -> 이렇게 하면 절대 안된다. redux를 사용할땐 state를 직접적으로 변경시킬 수 없다.\n//     // 대신, 새로운 state 객체를 return하여 재정의 시켜야한다.\n//     // 그렇기 때문에 return {counter:} 형식으로 사용해야한다.\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.value,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       showCounter: !state.showCounter,\n//     };\n//   }\n//   return state;\n// };\n\nconst initialAuthState = {\n  isAuthenticated: false,\n};\n\ncreateSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducer: {\n    login() {},\n    logout() {},\n  },\n});\n\nconst store = configureStore({\n  reducer: counterSlice.reducer,\n});\n\nexport const counterActions = counterSlice.actions;\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAE7D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACRC,SAAS,CAACC,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDQ,SAAS,CAACD,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDS,QAAQ,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAa,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IACxC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMY,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AACnB,CAAC;AAEDjB,WAAW,CAAC;EACVM,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAES,gBAAgB;EAC9BE,OAAO,EAAE;IACPC,KAAK,GAAG,CAAC,CAAC;IACVC,MAAM,GAAG,CAAC;EACZ;AACF,CAAC,CAAC;AAEF,MAAMC,KAAK,GAAGpB,cAAc,CAAC;EAC3BiB,OAAO,EAAEb,YAAY,CAACa;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMI,cAAc,GAAGjB,YAAY,CAACkB,OAAO;AAClD,eAAeF,KAAK"},"metadata":{},"sourceType":"module"}